# based on: https://github.com/pydata/pandas/blob/master/appveyor.yml
# and: https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
# and: https://github.com/cython/cython/blob/master/appveyor.yml (which is based on above)
# so try not to fall into a cyclic dependency when reading this
matrix:
  fast_finish: true

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:
    - PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4.3"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4.3"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5.0"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.0"
      PYTHON_ARCH: "64"

clone_depth: 5

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }
  - "%PYTHON%\\python.exe --version"
  - "%PYTHON%\\Scripts\\pip.exe --version"
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "pip install --disable-pip-version-check --user --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r requirements.txt"
  - "%CMD_IN_ENV% pip install -r dev-requirements.txt"
  - "%CMD_IN_ENV% python setup.py install"

init:
  - "ECHO %PYTHON_VERSION% %PYTHON%"

build: false

test_script:
  # Run the project tests
  # Use this once all the test modules pass
  # - "%CMD_IN_ENV% nosetests"
  # Enable/disable these to get all working, then go back to `nosetests`
  - "%CMD_IN_ENV% python cltk/tests/test_corpus.py"
  - "%CMD_IN_ENV% python cltk/tests/test_ir.py"
  - "%CMD_IN_ENV% python cltk/tests/test_prosody.py"
  - "%CMD_IN_ENV% python cltk/tests/test_stem.py"
  - "%CMD_IN_ENV% python cltk/tests/test_stop.py"
  - "%CMD_IN_ENV% python cltk/tests/test_tag.py"
  - "%CMD_IN_ENV% python cltk/tests/test_text_reuse.py"
  - "%CMD_IN_ENV% python cltk/tests/test_tokenize.py"
  - "%CMD_IN_ENV% python cltk/tests/test_utils.py"
